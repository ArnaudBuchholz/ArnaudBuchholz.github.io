Prerequesites:
- Presentation mode
- Command line in git\ArnaudBuchholz.github.io: npm start
- Command line in git\training-ui5con18-opa: node serve
- Command line in git\training-ui5con18-opa\demos
- start postman
- warmup mocha (demos\odata-test)
- Start Atom on opa.js
- Modify URL in opa.js

#1
This is a picture of the advanced test reactor at the Idaho National Laboratory, used to test nuclear fuel and materials.
This presentation is about using UI5 to test ODATA services.
It will be published after the conference for you to review it.

#2
Few words about me.
I have been working at SAP for 4 years.
I play a lot with JavaScript, both on front-end and back-end.
As you may hear it, I am French but I live in Canada.

#3
The agenda looks packed but this is the logical sequence of a story that started last year.

#4
Several projects will be covered during this talk.
I don't think it is necessary to introduce OpenUI5.
The training-ui5con18-opa project was initially created for last year presentation but it evolved to support this year conference.
jsdom is an open-source project that was really helpful to build node-ui5 that I will present today.

#5
There is more than UI in UI5.
Since I love code quality and test automation, I remind you that the framework comes with tools to validate the UI.
Besides that, I would like to show you how you can also leverage UI5 to test ODATA services.
However, the official tools for UI5 development are consolidated undert UI5 tooling.

#6
First chapter of our story: last year UI5Con.

#7
Last year, I presented "A journey with OPA".
Since it was recorded (and the link is available here) I will not replay the whole deck but rather recall some slides required to put you back in the proper context.

#8
UI5 contains the OPA framework, OPA stands for One Page Acceptance.
This toolset is designed to automate and validate the user interface.
By defining journeys and pages, the developer creates a readable abstraction of the user interface.
It means that the test script are easy to maintain.

#9
But, most of the time, an application requires a backend to store data and implement the business logic.
So, when it comes to testing, the dataset must be known to match the scenario.
Furthermore, some operations might be risky.
For instance, publishing information or interacting with physical devices.

#10
This is where the MockServer comes into play within the OPA framework.
The name itself is confusing. Actually, this software component resides in the browser.
It simulates the backend by hooking AJAX requests before they reach the network.
Then, it decides if and how it should answer.

When it starts, it loads or generate mocked data.
By default, it implements CRUD methods (create, read, update and delete). But it can be customized to extend its capabilities.

There will be a workshop named 'Building a MockServer' room D at 13:50

#11
✅ Run the app and show the network tab: no requests.
✅ Add a task and refresh the view, the task disappeared.
With this level of isolation, the OPA tests are self sufficient.
✅ Run the OPA tests.

#12 10:00
Second chapter of the story: building a real server using the MockServer.

#13
Some time after this event, I was internally contacted by a colleague.
He explained me that he wanted to use the MockServer in order to validate a network configuration before going to production.
In his particular scenario, he needed an ODATA server to answer calls made through a particular network landscape.

I started by explaining that the MockServer name was confusing and it was not possible to use it outside of a browser.

But he answered "Oh I know, I have a working proof of concept"

#14
His prototype is based on NodeJS and uses several frameworks: express, socket.io and Puppeteer.
Upon startup, puppeeter opens an instance of Chrome Headless.
Then, Chrome connects to the express server to load a page that instantiate the MockServer.
Last but not least, a realtime connection is established between NodeJS and Chrome through socket.io.

Every single ODATA request coming to NodeJS is received by express, transmitted to Chrome through socket.io, processed by the MockServer and the answer is sent back to the client.

#15
So I thought "There must be a better way".

#16
And I wondered "Why not embedding the MockServer directly in NodeJS rather than relying on two processes."

But MockServer being part of SapUI5, it has to be hosted by a browser to work properly.

After doing some research on the web...

#17
...jsdom appeared to be a solution to simulate a browser directly inside NodeJS.

In this example, the HTML content is evaluated in a simulated environment where the base URL is http://example.org.

You might recognize the bootstrap of SapUI5 that consists in loading sap-ui-core.js with some settings.

And it actually almost works.

#18
I said "almost" because it was not straightforward.

First of all, jsdom is a huge framework and so is its digital footprint. It has lots of dependencies.
Furthermore, synchronous requests are not handled. This comes from the nature of NodeJS that enforces asynchronicity.
As for a real browser, Cross Origin Resource Sharing is implemented. While creating a jsdom window, a base URL must be specified: it limits access to servers.
Last but not least, the simulation includes isolation. As a result, you can't use NodeJS code inside jsdom evaluated code.
For instance, if I want to load the MockServer with its mocked data, they have to be hosted (to be available through HTTP requests). This would force to include a web server to MockServer server.

#19
An easy way to workaround most of these limitations was to rewrite the XmlHttpRequest class.
This class is responsible of handling AJAX requests in a browser.

Doing so, it opened the door to access the file system, it removed the CORS limitation and synchronous requests were enabled using DeAsync.js, a NodeJS module that transform asynchronous code into synchronous one.

#20
After doing that, I was able to build a server that could answer ODATA requests using the MockServer.
For instance, I can now show you the $metadata of the simulate service.
✅ click $metadata, show the network tab and refresh
It means that I can also run the application with a 'real' server.
✅ click Application, stress out the "no-mock" parameter, show the network tab and play with the app
✅ Add a task and refresh the app, the task is still there

#21 15:00
Third chapter of the story: Generalizing the approach to UI5.

#22
The MockServer experiment demonstrated that it is possible to run UI5 in NodeJS.

So the next obvious question is...

#23
"What else can be done?"
And the answer is "Anything".

#24
By isolating parts of the MockServer proof of concept, a new NodeJS module called node-ui5 was created.

This module encapsulates all the necessary steps to load UI5 and make it available in NodeJS.

#25
You might be wondering, Why would you like to run UI5 inside NodeJS?
Well, first it gives you access to a native support of all the latest (and cool) JavaScript features.

In particular, the async & await operators are really helpful when it comes to dealing with asynchronous code.
Since these tools rely on promises, node-ui5 also provides helpers to wrap asynchronous API with promises.
(This will be demonstrated right after this slide).

But most important, it is easy to automate. Indeed, you don't need a browser or any complex selenium configuration.
Just NodeJS and a command line.

#26
In this example, we use the ODataModel v2, promisified with the module node-ui5 promisify, to access our MockServer and extract some data.
Please note the use of await to:
- Wait for the metadata to be loaded (quick remark, if the metadataLoaded promise is rejected the code will fail with an exception)
- Then to read the list of TodoItems

✅ In a DOS prompt, use node demos\test --fast

#27 20:00
So if we summarize everything we have seen so far, it is possible to load and use UI5 inside NodeJS.
What can we do with that? Since I am someone who likes testing, I looked into ODATA testing.

#28
I am a UI developer. Because of that, I am the primary user of the ODATA services built to expose information.
However, I am rarely involved in ODATA testing.

And basically, most of the ODATA testing focus on CRUD operations and I have rarely seen tests checking the content of the $metadata.

However, the $metadata is the schema that configures completely how the ODataModel will access the backend, it provides structural information that condition the list of possible operations. Hence it is critical to check that it is generated correctly and that it provides the right information.

#29
Let see how ODATA testing is done with POSTMAN
✅ Start postman
✅ Show $metadata testing
✅ $batch testing

#30
Now let's have a closer look on how ODATA is being used in an UI5 application.
UI5 relies on the Model View Controller pattern. Hence, it provides classes to implement models.
In particular, the ODataModel class will take care of the communication with the ODATA backend.

On the left of the diagram, you see how much is tested when focusing on ODATA only or if you do it through the ODataModel class.

#31
What are the benefits of using the ODataModel class.
First of all, it always validate the $metadata. Indeed, it is a prerequisite for this class to download and parse the $metadata before being available. Furthermore, the class provides information about the loaded entities. So that you don't have to parse the $metadata manually. You will see in the next slide how you can gather field properties in a simple way.

Also, considering CRUD operations, this component is capable of deserializing entities and it enables batching transparently.

#32
✅ Click the link to show the example
✅ Show entity properties
✅ show $batch

#33
How much does it cost to develop such tests?

Actually, when building an application it is always a good idea to also prepare the MockServer.
Not only this is the first step for OPA testing but it also enables the development before the backend is ready.

To ensure the MockServer works the right way, you can implement it using Test Driven Development.

Then, to some extend, the same tests may apply to the backend.

#34
✅ Show MockServer qUnit source
✅ Run qUnit of MockServer

The same tests can be run in a command line against a real server
✅ Run demos/qunit-mockserver.js

#35 30:00
Ultimately, the idea is to reuse as much as possible the code being developed for the UI to also test the backend.
We reached the last chapter of our story: End to End testing with OPA.

#36
Usually OPA is used for component testing or integration but without connection to the backend.
That's why we need the MockServer.

#37
What do we need to add the backend in this test configuration?

OPA provides patterns to abstract the UI. As a result, the tests (or journeys) are easy to read and maintain.

To access the ODATA service, the tested application and the service must be hosted on the same server.

But the OPA test code is not delivered with the application.

Hence it is not possible to run OPA tests against a distant server.

#38
One solution would consists in simulating a flat landscape where the OPA test code and the application would appear to be on the same server.

node-ui5 offers a configurable proxy server that allows this configuration.

From a browser point of view, everything becomes local.

#39
A disclaimer before starting the demo, this is a Proof of Concept, there are many unanswered questions (such as authentication) that I need to solve before it becomes a reliable tool.
But as a first step, I'd like to show how I can access a remote app from the OPA code.

✅ Demo first by setting https:// => It fails
✅ Then use the /proxy/https/ => it works

The big value of such a mechanism is that it becomes possible to leverage existing OPA code to manipulate and test the real application.

#40 35:00
To conclude.

UI developers can contribute to backend testing.
OPA is powerful and we should leverage the tool and help improve it (make it grow).

As a side note, never fear the failure. I started this project as an experiment and I ended up building a tool that, I hope, will help the community to develop better.
